/**
 * This class is generated by jOOQ
 */
package com.metapx.pixeltransfer.database.generated.tables;


import com.metapx.pixeltransfer.database.generated.Keys;
import com.metapx.pixeltransfer.database.generated.Public;
import com.metapx.pixeltransfer.database.generated.tables.records.ImageRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Image extends TableImpl<ImageRecord> {

    private static final long serialVersionUID = 1619962688;

    /**
     * The reference instance of <code>PUBLIC.IMAGE</code>
     */
    public static final Image IMAGE = new Image();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImageRecord> getRecordType() {
        return ImageRecord.class;
    }

    /**
     * The column <code>PUBLIC.IMAGE.ID</code>.
     */
    public final TableField<ImageRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.IMAGE.NAME</code>.
     */
    public final TableField<ImageRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>PUBLIC.IMAGE</code> table reference
     */
    public Image() {
        this("IMAGE", null);
    }

    /**
     * Create an aliased <code>PUBLIC.IMAGE</code> table reference
     */
    public Image(String alias) {
        this(alias, IMAGE);
    }

    private Image(String alias, Table<ImageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Image(String alias, Table<ImageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ImageRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ImageRecord>> getKeys() {
        return Arrays.<UniqueKey<ImageRecord>>asList(Keys.CONSTRAINT_4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Image as(String alias) {
        return new Image(alias, this);
    }

    /**
     * Rename this table
     */
    public Image rename(String name) {
        return new Image(name, null);
    }
}
