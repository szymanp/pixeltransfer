/**
 * This class is generated by jOOQ
 */
package com.metapx.pixeltransfer.database.generated.tables.records;


import com.metapx.pixeltransfer.database.generated.tables.Image;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImageRecord extends UpdatableRecordImpl<ImageRecord> implements Record4<Integer, String, String, Byte> {

    private static final long serialVersionUID = -122701557;

    /**
     * Setter for <code>PUBLIC.IMAGE.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.IMAGE.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>PUBLIC.IMAGE.NAME</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.IMAGE.NAME</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.IMAGE.HASH</code>.
     */
    public void setHash(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.IMAGE.HASH</code>.
     */
    public String getHash() {
        return (String) get(2);
    }

    /**
     * Setter for <code>PUBLIC.IMAGE.STATE</code>.
     */
    public void setState(Byte value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.IMAGE.STATE</code>.
     */
    public Byte getState() {
        return (Byte) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, String, Byte> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, String, String, Byte> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Image.IMAGE.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Image.IMAGE.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Image.IMAGE.HASH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field4() {
        return Image.IMAGE.STATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getHash();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value4() {
        return getState();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageRecord value2(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageRecord value3(String value) {
        setHash(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageRecord value4(Byte value) {
        setState(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageRecord values(Integer value1, String value2, String value3, Byte value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ImageRecord
     */
    public ImageRecord() {
        super(Image.IMAGE);
    }

    /**
     * Create a detached, initialised ImageRecord
     */
    public ImageRecord(Integer id, String name, String hash, Byte state) {
        super(Image.IMAGE);

        set(0, id);
        set(1, name);
        set(2, hash);
        set(3, state);
    }
}
